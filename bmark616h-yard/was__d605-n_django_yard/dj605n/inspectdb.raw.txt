  Docker container started entrypoint.sh
# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey and OneToOneField has `on_delete` set to the desired behavior
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from django.db import models


class Course(models.Model):
    courseid = models.AutoField(db_column='CourseID', primary_key=True)  # Field name made lowercase.
    coursetitle = models.CharField(db_column='CourseTitle', max_length=64)  # Field name made lowercase.
    coursedescription = models.TextField(db_column='CourseDescription')  # Field name made lowercase.
    htmloutline = models.TextField(db_column='HTMLOutline')  # Field name made lowercase.
    pdfoutline = models.TextField(db_column='PDFOutline')  # Field name made lowercase.
    pdfoutline_mimetype = models.CharField(db_column='PDFOutline_mimetype', max_length=64, blank=True, null=True)  # Field name made lowercase.
    subject = models.CharField(db_column='Subject', max_length=128)  # Field name made lowercase.
    coursenumber = models.CharField(db_column='CourseNumber', max_length=10)  # Field name made lowercase.
    credits = models.IntegerField(db_column='Credits')  # Field name made lowercase.
    lastmodified = models.DateTimeField(db_column='LastModified')  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'Course'


class Program(models.Model):
    programid = models.AutoField(db_column='ProgramID', primary_key=True)  # Field name made lowercase.
    programname = models.CharField(db_column='ProgramName', max_length=64)  # Field name made lowercase.
    programdescription = models.TextField(db_column='ProgramDescription')  # Field name made lowercase.
    htmloutline = models.TextField(db_column='HTMLOutline')  # Field name made lowercase.
    pdfoutline = models.TextField(db_column='PDFOutline')  # Field name made lowercase.
    pdfoutline_mimetype = models.CharField(db_column='PDFOutline_mimetype', max_length=32, blank=True, null=True)  # Field name made lowercase.
    admissiondeadline = models.DateField(db_column='AdmissionDeadline')  # Field name made lowercase.
    lastmodified = models.DateTimeField(db_column='LastModified')  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'Program'


class Programcourses(models.Model):
    programid = models.IntegerField(db_column='ProgramID', primary_key=True)  # Field name made lowercase.
    courseid = models.IntegerField(db_column='CourseID')  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'ProgramCourses'
        unique_together = (('programid', 'courseid'),)


class AuthGroup(models.Model):
    name = models.CharField(unique=True, max_length=150)

    class Meta:
        managed = False
        db_table = 'auth_group'


class AuthGroupPermissions(models.Model):
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)
    permission = models.ForeignKey('AuthPermission', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_group_permissions'
        unique_together = (('group', 'permission'),)


class AuthPermission(models.Model):
    name = models.CharField(max_length=255)
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING)
    codename = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'auth_permission'
        unique_together = (('content_type', 'codename'),)


class AuthUser(models.Model):
    password = models.CharField(max_length=128)
    last_login = models.DateTimeField(blank=True, null=True)
    is_superuser = models.IntegerField()
    username = models.CharField(unique=True, max_length=150)
    first_name = models.CharField(max_length=150)
    last_name = models.CharField(max_length=150)
    email = models.CharField(max_length=254)
    is_staff = models.IntegerField()
    is_active = models.IntegerField()
    date_joined = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'auth_user'


class AuthUserGroups(models.Model):
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_groups'
        unique_together = (('user', 'group'),)


class AuthUserUserPermissions(models.Model):
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    permission = models.ForeignKey(AuthPermission, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_user_permissions'
        unique_together = (('user', 'permission'),)


class BlogappArticle(models.Model):
    headline = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'blogapp_article'


class BlogappArticlePublications(models.Model):
    article = models.ForeignKey(BlogappArticle, models.DO_NOTHING)
    publication = models.ForeignKey('BlogappPublication', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'blogapp_article_publications'
        unique_together = (('article', 'publication'),)


class BlogappAuthor(models.Model):
    name = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'blogapp_author'


class BlogappBook(models.Model):
    title = models.CharField(max_length=100)
    author = models.ForeignKey(BlogappAuthor, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'blogapp_book'


class BlogappGroup(models.Model):
    name = models.CharField(max_length=128)

    class Meta:
        managed = False
        db_table = 'blogapp_group'


class BlogappGroupMembers(models.Model):
    group = models.ForeignKey(BlogappGroup, models.DO_NOTHING)
    person = models.ForeignKey('BlogappPerson', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'blogapp_group_members'
        unique_together = (('group', 'person'),)


class BlogappPerson(models.Model):
    name = models.CharField(max_length=128)

    class Meta:
        managed = False
        db_table = 'blogapp_person'


class BlogappPost(models.Model):
    created = models.DateTimeField()
    last_updated = models.DateTimeField()
    title = models.CharField(max_length=230)
    body = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'blogapp_post'


class BlogappPublication(models.Model):
    title = models.CharField(max_length=30)

    class Meta:
        managed = False
        db_table = 'blogapp_publication'


class Books(models.Model):
    title = models.CharField(max_length=30)
    genre = models.CharField(max_length=10)
    description = models.TextField()
    obs_id = models.TextField(db_column='obs.id')  # Field renamed to remove unsuitable characters.
    obs_id_0 = models.TextField(db_column='obs_id')  # Field renamed because of name conflict.
    obs_id_1 = models.CharField(db_column='obs-id', max_length=60)  # Field renamed to remove unsuitable characters. Field renamed because of name conflict.

    class Meta:
        managed = False
        db_table = 'books'


class CopyNteNote(models.Model):
    note_id = models.AutoField(primary_key=True)
    note_fld = models.TextField(blank=True, null=True)
    tags_fld = models.CharField(max_length=244, blank=True, null=True)
    state_fld = models.CharField(max_length=99, blank=True, null=True)
    country_id = models.IntegerField(blank=True, null=True)
    province_id = models.IntegerField(blank=True, null=True)
    city_id = models.IntegerField(blank=True, null=True)
    createdtime = models.DateTimeField(blank=True, null=True)
    updatedtime = models.DateTimeField(blank=True, null=True)
    datenote = models.DateTimeField(blank=True, null=True)
    active = models.CharField(max_length=3, blank=True, null=True)
    note2 = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'copy_nte_note'


class Dashboard(models.Model):
    dashboard_id = models.AutoField(primary_key=True)

    class Meta:
        managed = False
        db_table = 'dashboard'


class DatafaceDatagrids(models.Model):
    gridid = models.AutoField(db_column='gridID', primary_key=True)  # Field name made lowercase.
    gridname = models.CharField(db_column='gridName', max_length=64)  # Field name made lowercase.
    griddata = models.TextField(db_column='gridData', blank=True, null=True)  # Field name made lowercase.
    tablename = models.CharField(db_column='tableName', max_length=64)  # Field name made lowercase.

    class Meta:
        managed = False
        db_table = 'dataface__datagrids'


class DatafaceFailedLogins(models.Model):
    attempt_id = models.AutoField(primary_key=True)
    ip_address = models.CharField(max_length=32)
    username = models.CharField(max_length=32)
    time_of_attempt = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'dataface__failed_logins'


class DatafaceHtmlreportsReports(models.Model):
    report_id = models.AutoField(primary_key=True)
    actiontool_name = models.CharField(max_length=255, blank=True, null=True)
    actiontool_category = models.CharField(max_length=255, blank=True, null=True)
    actiontool_label = models.CharField(max_length=255, blank=True, null=True)
    actiontool_permission = models.CharField(max_length=255, blank=True, null=True)
    icon = models.CharField(max_length=255, blank=True, null=True)
    tablename = models.CharField(max_length=255)
    template_css = models.TextField(blank=True, null=True)
    template_html = models.TextField()
    default_view = models.CharField(max_length=255, blank=True, null=True)
    created_by = models.CharField(max_length=255, blank=True, null=True)
    private = models.IntegerField(blank=True, null=True)
    date_created = models.DateTimeField(blank=True, null=True)
    last_modified = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'dataface__htmlreports_reports'


class DatafaceModules(models.Model):
    module_name = models.CharField(primary_key=True, max_length=255)
    module_version = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'dataface__modules'


class DatafaceMtimes(models.Model):
    name = models.CharField(primary_key=True, max_length=255)
    mtime = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'dataface__mtimes'


class DatafacePreferences(models.Model):
    pref_id = models.AutoField(primary_key=True)
    username = models.CharField(max_length=64)
    table = models.CharField(max_length=128)
    record_id = models.CharField(max_length=255)
    key = models.CharField(max_length=128)
    value = models.CharField(max_length=255)

    class Meta:
        managed = False
        db_table = 'dataface__preferences'


class DatafaceRecordMtimes(models.Model):
    recordhash = models.CharField(primary_key=True, max_length=32)
    recordid = models.CharField(max_length=255)
    mtime = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'dataface__record_mtimes'


class DatafaceVersion(models.Model):
    version = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'dataface__version'


class DepCities(models.Model):
    city_id = models.AutoField(primary_key=True)
    province_id = models.IntegerField(blank=True, null=True)
    city_name = models.CharField(max_length=300, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'dep_cities'


class DepCountries(models.Model):
    country_id = models.AutoField(primary_key=True)
    country_name = models.CharField(max_length=300, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'dep_countries'


class DepProvinces(models.Model):
    province_id = models.AutoField(primary_key=True)
    country_id = models.IntegerField(blank=True, null=True)
    province_name = models.CharField(max_length=300, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'dep_provinces'


class DjangoAdminLog(models.Model):
    action_time = models.DateTimeField()
    object_id = models.TextField(blank=True, null=True)
    object_repr = models.CharField(max_length=200)
    action_flag = models.PositiveSmallIntegerField()
    change_message = models.TextField()
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'django_admin_log'


class DjangoContentType(models.Model):
    app_label = models.CharField(max_length=100)
    model = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'django_content_type'
        unique_together = (('app_label', 'model'),)


class DjangoMigrations(models.Model):
    app = models.CharField(max_length=255)
    name = models.CharField(max_length=255)
    applied = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_migrations'


class DjangoSession(models.Model):
    session_key = models.CharField(primary_key=True, max_length=40)
    session_data = models.TextField()
    expire_date = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_session'


class Notes(models.Model):
    country = models.IntegerField(blank=True, null=True)
    staten = models.IntegerField(blank=True, null=True)
    cityn = models.IntegerField(blank=True, null=True)
    updatedtime = models.DateTimeField()
    createdtime = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'notes'


class NteAboutThisApp(models.Model):
    about_fld = models.TextField(blank=True, null=True)
    createdtime = models.DateTimeField(blank=True, null=True)
    updatedtime = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'nte_about_this_app'


class NteAboutThisAppHistory(models.Model):
    history_id = models.AutoField(db_column='history__id', primary_key=True)  # Field renamed because it contained more than one '_' in a row.
    history_language = models.CharField(db_column='history__language', max_length=2, blank=True, null=True)  # Field renamed because it contained more than one '_' in a row.
    history_comments = models.TextField(db_column='history__comments', blank=True, null=True)  # Field renamed because it contained more than one '_' in a row.
    history_user = models.CharField(db_column='history__user', max_length=32, blank=True, null=True)  # Field renamed because it contained more than one '_' in a row.
    history_state = models.IntegerField(db_column='history__state', blank=True, null=True)  # Field renamed because it contained more than one '_' in a row.
    history_modified = models.DateTimeField(db_column='history__modified', blank=True, null=True)  # Field renamed because it contained more than one '_' in a row.
    id = models.IntegerField(blank=True, null=True)
    about_fld = models.TextField(blank=True, null=True)
    createdtime = models.DateTimeField()
    updatedtime = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'nte_about_this_app__history'


class NteNote(models.Model):
    note_id = models.AutoField(primary_key=True)
    note_fld = models.TextField(blank=True, null=True)
    tags_fld = models.CharField(max_length=244, blank=True, null=True)
    state_fld = models.CharField(max_length=99, blank=True, null=True)
    country_id = models.IntegerField(blank=True, null=True)
    province_id = models.IntegerField(blank=True, null=True)
    city_id = models.IntegerField(blank=True, null=True)
    createdtime = models.DateTimeField(blank=True, null=True)
    updatedtime = models.DateTimeField(blank=True, null=True)
    datenote = models.DateTimeField(blank=True, null=True)
    active = models.CharField(max_length=3, blank=True, null=True)
    note2 = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'nte_note'


class NteNoteHistory(models.Model):
    history_id = models.AutoField(db_column='history__id', primary_key=True)  # Field renamed because it contained more than one '_' in a row.
    history_language = models.CharField(db_column='history__language', max_length=2, blank=True, null=True)  # Field renamed because it contained more than one '_' in a row.
    history_comments = models.TextField(db_column='history__comments', blank=True, null=True)  # Field renamed because it contained more than one '_' in a row.
    history_user = models.CharField(db_column='history__user', max_length=32, blank=True, null=True)  # Field renamed because it contained more than one '_' in a row.
    history_state = models.IntegerField(db_column='history__state', blank=True, null=True)  # Field renamed because it contained more than one '_' in a row.
    history_modified = models.DateTimeField(db_column='history__modified', blank=True, null=True)  # Field renamed because it contained more than one '_' in a row.
    note_fld = models.TextField(blank=True, null=True)
    tags_fld = models.CharField(max_length=244, blank=True, null=True)
    updatedtime = models.DateTimeField(blank=True, null=True)
    note_id = models.IntegerField(blank=True, null=True)
    createdtime = models.DateTimeField()
    datenote = models.DateTimeField(blank=True, null=True)
    active = models.CharField(max_length=3, blank=True, null=True)
    note2 = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'nte_note__history'


class NteNoteTags(models.Model):
    nid = models.IntegerField(primary_key=True)
    tid = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'nte_note_tags'
        unique_together = (('nid', 'tid'),)


class NteTags(models.Model):
    tags_id = models.AutoField(primary_key=True)
    tags_list = models.CharField(max_length=234)

    class Meta:
        managed = False
        db_table = 'nte_tags'


class NteTagsHistory(models.Model):
    history_id = models.AutoField(db_column='history__id', primary_key=True)  # Field renamed because it contained more than one '_' in a row.
    history_language = models.CharField(db_column='history__language', max_length=2, blank=True, null=True)  # Field renamed because it contained more than one '_' in a row.
    history_comments = models.TextField(db_column='history__comments', blank=True, null=True)  # Field renamed because it contained more than one '_' in a row.
    history_user = models.CharField(db_column='history__user', max_length=32, blank=True, null=True)  # Field renamed because it contained more than one '_' in a row.
    history_state = models.IntegerField(db_column='history__state', blank=True, null=True)  # Field renamed because it contained more than one '_' in a row.
    history_modified = models.DateTimeField(db_column='history__modified', blank=True, null=True)  # Field renamed because it contained more than one '_' in a row.
    tags_id = models.IntegerField(blank=True, null=True)
    tags_list = models.CharField(max_length=234, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'nte_tags__history'


class PtsappApplication(models.Model):
    id = models.IntegerField(blank=True, null=True)
    vehicle_id = models.IntegerField(blank=True, null=True)
    source = models.CharField(max_length=252, blank=True, null=True)
    application = models.CharField(max_length=252, blank=True, null=True)
    pts_topology = models.CharField(max_length=252, blank=True, null=True)
    num_speeds = models.CharField(max_length=252, blank=True, null=True)
    pts_supplier = models.CharField(max_length=252, blank=True, null=True)
    total_gear_ratio = models.CharField(max_length=252, blank=True, null=True)
    total_center_distance_mm = models.CharField(max_length=252, blank=True, null=True)
    differential_type = models.CharField(max_length=252, blank=True, null=True)
    pts_mass_kg = models.DecimalField(max_digits=11, decimal_places=2, blank=True, null=True)
    pts_length_mm = models.DecimalField(max_digits=11, decimal_places=2, blank=True, null=True)
    pts_width_mm = models.DecimalField(max_digits=11, decimal_places=2, blank=True, null=True)
    pts_height_mm = models.DecimalField(max_digits=11, decimal_places=2, blank=True, null=True)
    pts_power_density_kw_per_kg = models.DecimalField(max_digits=11, decimal_places=2, blank=True, null=True)
    pts_specific_power_kw_per_mm3 = models.DecimalField(max_digits=11, decimal_places=2, blank=True, null=True)
    kisssys_kisssoft_model_link = models.CharField(max_length=252, blank=True, null=True)
    load_spectrum_id = models.CharField(max_length=252, blank=True, null=True)
    lubrication = models.CharField(max_length=252, blank=True, null=True)
    created_at = models.CharField(max_length=19, blank=True, null=True)
    updated_at = models.CharField(max_length=19, blank=True, null=True)
    sort_order = models.IntegerField(blank=True, null=True)
    active_status = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ptsapp_application'


class PtsappVehicle(models.Model):
    vehicle_id = models.IntegerField(blank=True, null=True)
    vehicle_maker = models.CharField(max_length=252, blank=True, null=True)
    vehicle_model = models.CharField(max_length=252, blank=True, null=True)
    vehicle_class_si_vehicle_segment = models.CharField(max_length=252, blank=True, null=True)
    maximum_speed_kph = models.BigIntegerField(blank=True, null=True)
    number_of_electric_motors = models.BigIntegerField(blank=True, null=True)
    max_motor_power_kw = models.IntegerField(db_column='max_ motor_power_kw', blank=True, null=True)  # Field renamed to remove unsuitable characters.
    max_motor_torque_nm = models.BigIntegerField(blank=True, null=True)
    max_motor_speed_rpm = models.BigIntegerField(blank=True, null=True)
    source = models.CharField(max_length=252, blank=True, null=True)
    created_at = models.CharField(max_length=19, blank=True, null=True)
    updated_at = models.CharField(max_length=19, blank=True, null=True)
    sort_order = models.IntegerField(blank=True, null=True)
    active_status = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ptsapp_vehicle'


class States(models.Model):
    id = models.SmallAutoField(primary_key=True)
    state = models.CharField(max_length=32)
    abbrev = models.CharField(max_length=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'states'


class TblCity(models.Model):
    city_id = models.AutoField(primary_key=True)
    state_id = models.IntegerField()
    city_name = models.CharField(max_length=35)

    class Meta:
        managed = False
        db_table = 'tbl_city'


class TblCountry(models.Model):
    country_id = models.AutoField(primary_key=True)
    country_name = models.CharField(max_length=25)

    class Meta:
        managed = False
        db_table = 'tbl_country'


class TblState(models.Model):
    state_id = models.AutoField(primary_key=True)
    country_id = models.IntegerField()
    state_name = models.CharField(max_length=35)

    class Meta:
        managed = False
        db_table = 'tbl_state'


class UsersHistory(models.Model):
    history_id = models.AutoField(db_column='history__id', primary_key=True)  # Field renamed because it contained more than one '_' in a row.
    history_language = models.CharField(db_column='history__language', max_length=2, blank=True, null=True)  # Field renamed because it contained more than one '_' in a row.
    history_comments = models.TextField(db_column='history__comments', blank=True, null=True)  # Field renamed because it contained more than one '_' in a row.
    history_user = models.CharField(db_column='history__user', max_length=32, blank=True, null=True)  # Field renamed because it contained more than one '_' in a row.
    history_state = models.IntegerField(db_column='history__state', blank=True, null=True)  # Field renamed because it contained more than one '_' in a row.
    history_modified = models.DateTimeField(db_column='history__modified', blank=True, null=True)  # Field renamed because it contained more than one '_' in a row.
    username = models.CharField(max_length=32, blank=True, null=True)
    password = models.CharField(max_length=244, blank=True, null=True)
    role = models.CharField(db_column='Role', max_length=9, blank=True, null=True)  # Field name made lowercase.
    comment_fld1 = models.TextField(blank=True, null=True)
    createdtime = models.DateTimeField()
    updatedtime = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'users__history'


class UsersXataface(models.Model):
    username = models.CharField(primary_key=True, max_length=32)
    password = models.CharField(max_length=244)
    role = models.CharField(db_column='Role', max_length=9, blank=True, null=True)  # Field name made lowercase.
    comment_fld1 = models.TextField(blank=True, null=True)
    createdtime = models.DateTimeField(blank=True, null=True)
    updatedtime = models.DateTimeField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'users_xataface'


class VwNteNoteHistory(models.Model):
    history_id = models.AutoField(db_column='history__id', primary_key=True)  # Field renamed because it contained more than one '_' in a row.
    history_language = models.CharField(db_column='history__language', max_length=2, blank=True, null=True)  # Field renamed because it contained more than one '_' in a row.
    history_comments = models.TextField(db_column='history__comments', blank=True, null=True)  # Field renamed because it contained more than one '_' in a row.
    history_user = models.CharField(db_column='history__user', max_length=32, blank=True, null=True)  # Field renamed because it contained more than one '_' in a row.
    history_state = models.IntegerField(db_column='history__state', blank=True, null=True)  # Field renamed because it contained more than one '_' in a row.
    history_modified = models.DateTimeField(db_column='history__modified', blank=True, null=True)  # Field renamed because it contained more than one '_' in a row.
    note_fld = models.TextField(blank=True, null=True)
    tags_fld = models.CharField(max_length=244, blank=True, null=True)
    datenote = models.DateTimeField(blank=True, null=True)
    active = models.CharField(max_length=3, blank=True, null=True)
    createdtime = models.DateTimeField()
    updatedtime = models.DateTimeField(blank=True, null=True)
    note_id = models.IntegerField(blank=True, null=True)
    state_fld = models.CharField(max_length=99, blank=True, null=True)
    note2 = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'vw_nte_note__history'


class ZBk1NteNote(models.Model):
    note_id = models.AutoField(primary_key=True)
    note_fld = models.TextField(blank=True, null=True)
    tags_fld = models.CharField(max_length=244, blank=True, null=True)
    state_fld = models.CharField(max_length=99, blank=True, null=True)
    createdtime = models.DateTimeField(blank=True, null=True)
    updatedtime = models.DateTimeField(blank=True, null=True)
    datenote = models.DateTimeField(blank=True, null=True)
    active = models.CharField(max_length=3, blank=True, null=True)
    note2 = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'z,bk1,nte_note'
